{"version":3,"sources":["axios.js","config.js","helpers/util.js","components/Home.jsx","components/KeyPage.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["axios","create","baseURL","randDarkColor","hex","String","Math","random","toString","slice","toUpperCase","replace","length","c","i","rgb","parseInt","substr","round","min","max","Home","useState","prefectures","setPrefectures","chartData","setChartData","useEffect","localStorage","getItem","window","location","href","get","headers","then","response","console","log","data","message","alert","removeItem","prefList","result","forEach","item","selected","catch","error","getPopulationByPref","pref","prefCode","totalPopulation","find","label","sort","a","b","year","popPerYear","prefName","value","addChartData","prefecturesList","map","className","htmlFor","type","name","id","onClick","findPref","newChartData","handleSelectPref","prefLines","filter","Line","dataKey","stroke","renderLineChart","LineChart","margin","top","bottom","left","right","CartesianGrid","strokeDasharray","XAxis","padding","position","YAxis","Tooltip","Legend","verticalAlign","align","layout","ResponsiveContainer","width","height","style","fontStyle","KeyPage","apiKey","setApiKey","showKey","setShowKey","onSubmit","event","key","preventDefault","setItem","size","minLength","onChange","target","required","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.605c83e8.chunk.js","sourcesContent":["import axios from 'axios'\nimport config from './config'\n\nexport default axios.create({\n    baseURL: config.rootPath,\n    // headers: {\n    //     'X-API-KEY': process.env.REACT_APP_API_KEY,\n    // },\n})\n","export default {\n    rootPath: 'https://opendata.resas-portal.go.jp/api/v1/',\n}\n","const randDarkColor = () => {\n    const lum = -0.25\n    let hex = String(\n        `#${Math.random().toString(16).slice(2, 8).toUpperCase()}`\n    ).replace(/[^0-9a-f]/gi, '')\n    if (hex.length < 6) {\n        hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2]\n    }\n    let rgb = '#'\n    let c\n    let i\n    for (i = 0; i < 3; i += 1) {\n        c = parseInt(hex.substr(i * 2, 2), 16)\n        c = Math.round(Math.min(Math.max(0, c + c * lum), 255)).toString(16)\n        rgb += `00${c}`.substr(c.length)\n    }\n    return rgb\n}\nexport default randDarkColor\n","import React, { useEffect, useState } from 'react'\nimport {\n    LineChart,\n    Line,\n    CartesianGrid,\n    XAxis,\n    YAxis,\n    Tooltip,\n    Legend,\n    ResponsiveContainer,\n} from 'recharts'\nimport axios from '../axios'\nimport randDarkColor from '../helpers/util'\n\nconst Home = () => {\n    const [prefectures, setPrefectures] = useState([])\n    const [chartData, setChartData] = useState([])\n\n    // Call API to get list of prefectures\n    const getPrefectures = () => {\n        axios\n            .get('prefectures', {\n                headers: {\n                    'X-API-KEY': localStorage.getItem('apiKey'),\n                },\n            })\n            .then((response) => {\n                console.log(response)\n                if (!response.data.message) {\n                    const prefList = response.data.result\n                    // Add a selected attribute to each prefecture item to know whether it is selected or not\n                    prefList.forEach((item) => {\n                        item.selected = false\n                    })\n                    setPrefectures(prefList)\n                } else {\n                    alert('APIキーは使用できません')\n                    localStorage.removeItem('apiKey')\n                    window.location.href = '/'\n                }\n            })\n            .catch((error) => console.log(error))\n    }\n\n    const checkApiKey = () => {\n        if (!localStorage.getItem('apiKey')) {\n            window.location.href = '/'\n        }\n    }\n\n    useEffect(() => {\n        checkApiKey()\n        getPrefectures()\n    }, [])\n\n    // Add received population data to show on line chart\n    const addChartData = (pref, popPerYear) => {\n        const data = [...chartData]\n        for (let i = 0; i < popPerYear.length; i += 1) {\n            data[i] = {\n                ...data[i],\n                year: popPerYear[i].year,\n                [pref.prefName]: popPerYear[i].value,\n            }\n        }\n        setChartData(data)\n    }\n\n    // Call API to get population per year by prefecture\n    const getPopulationByPref = (pref) => {\n        axios\n            .get(\n                `population/composition/perYear?cityCode=-&prefCode=${pref.prefCode}`,\n                {\n                    headers: {\n                        'X-API-KEY': localStorage.getItem('apiKey'),\n                    },\n                }\n            )\n            .then((response) => {\n                const population = response.data.result.data\n                const totalPopulation = population.find(\n                    (item) => item.label === '総人口'\n                ).data\n                // Sort array of total population by year ascending\n                totalPopulation.sort((a, b) => a.year - b.year)\n\n                addChartData(pref, totalPopulation)\n            })\n            .catch((error) => console.log(error))\n    }\n\n    // Set selected attribute to true when prefecture is selected, ortherwise false\n    const handleSelectPref = (pref) => {\n        const findPref = prefectures.find((item) => item === pref)\n        findPref.selected = !findPref.selected\n        // If selected, call API to get population then add to chart data\n        if (findPref.selected) {\n            getPopulationByPref(findPref)\n        } else {\n            // If selection canceled, remove population of that prefecture from chart data\n            const newChartData = [...chartData]\n            newChartData.forEach((item) => delete item[findPref.prefName])\n            setChartData(newChartData)\n        }\n    }\n\n    // Component to show list of prefectures\n    const prefecturesList = prefectures.map((item) => (\n        <div className=\"app-prefecture-item\" key={item.prefCode}>\n            <label htmlFor={item.prefCode}>\n                <input\n                    type=\"checkbox\"\n                    name={item.prefName}\n                    id={item.prefCode}\n                    onClick={() => handleSelectPref(item)}\n                />\n                {item.prefName}\n            </label>\n        </div>\n    ))\n\n    // Component to show all lines of selected prefectures, each line has random color\n    const prefLines = prefectures\n        .filter((pref) => pref.selected)\n        .map((pref) => (\n            <Line\n                key={pref.prefCode}\n                type=\"monotone\"\n                dataKey={pref.prefName}\n                stroke={randDarkColor()}\n            />\n        ))\n\n    const renderLineChart = (\n        <LineChart\n            data={chartData}\n            margin={{\n                top: 40,\n                bottom: 40,\n                left: 40,\n                right: 40,\n            }}\n        >\n            {prefLines}\n            <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n            <XAxis\n                padding={{ right: 60 }}\n                dataKey=\"year\"\n                label={{\n                    value: '年度',\n                    position: 'insideBottomRight',\n                }}\n            />\n            <YAxis\n                padding={{ top: 40 }}\n                label={{\n                    value: '人口数',\n                    position: 'insideTopLeft',\n                }}\n            />\n            <Tooltip />\n            <Legend verticalAlign=\"top\" align=\"right\" layout=\"vertical\" />\n        </LineChart>\n    )\n\n    return (\n        <div className=\"container\">\n            <h1 className=\"app-title\">都道府県の人口数</h1>\n            <h2>都道府県</h2>\n            <div className=\"app-prefecture-list\">{prefecturesList}</div>\n            {prefectures.find((pref) => pref.selected) ? (\n                <div className=\"app-linechart\">\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        {renderLineChart}\n                    </ResponsiveContainer>\n                </div>\n            ) : (\n                <div style={{ fontStyle: 'italic' }}>\n                    *都道府県を選択してください。*\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport default Home\n","import React, { useState } from 'react'\n\nconst KeyPage = () => {\n    const [apiKey, setApiKey] = useState('')\n    const [showKey, setShowKey] = useState(false)\n\n    const handleSubmit = (e, key) => {\n        e.preventDefault()\n        localStorage.setItem('apiKey', key)\n        window.location.href = '/home'\n    }\n    return (\n        <div className=\"app-key-page\">\n            <div className=\"app-key-card\">\n                <form\n                    className=\"app-form\"\n                    onSubmit={(event) => handleSubmit(event, apiKey)}\n                >\n                    <label htmlFor=\"apiKey\">\n                        <h3>Enter your API Key</h3>\n                        <input\n                            type={showKey ? 'text' : 'password'}\n                            name=\"apiKey\"\n                            id=\"apiKey\"\n                            size=\"30\"\n                            minLength=\"12\"\n                            onChange={(event) => setApiKey(event.target.value)}\n                            required\n                        />\n                    </label>\n                    <label className=\"app-form-checkbox\" htmlFor=\"showKey\">\n                        <input\n                            type=\"checkbox\"\n                            name=\"showKey\"\n                            id=\"showKey\"\n                            onClick={() => setShowKey(!showKey)}\n                        />\n                        Show your API Key\n                    </label>\n                    <button className=\"app-form-btn\" type=\"submit\">\n                        Check\n                    </button>\n                </form>\n                {/* <button\n                    type=\"button\"\n                    onClick={() => localStorage.removeItem('apiKey')}\n                >\n                    delete key\n                </button> */}\n            </div>\n        </div>\n    )\n}\n\nexport default KeyPage\n","import React from 'react'\nimport './App.css'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport Home from './components/Home'\nimport KeyPage from './components/KeyPage'\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Router>\n                <Switch>\n                    <Route exact path=\"/\">\n                        <KeyPage />\n                    </Route>\n                    <Route exact path=\"/home\">\n                        <Home />\n                    </Route>\n                </Switch>\n            </Router>\n        </div>\n    )\n}\n\nexport default App\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry)\n                getFID(onPerfEntry)\n                getFCP(onPerfEntry)\n                getLCP(onPerfEntry)\n                getTTFB(onPerfEntry)\n            }\n        )\n    }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}